# 0 MISC
# 0.1 Set ZSH theme to fishy
ZSH_THEME="fishy"
# 0.2 Set default text editor to vi
export EDITOR='vi'

# 1 ALIASES

# 1.1 Typo Aversion
alias nom="npm"
alias nmp="npm"
alias got="git"
alias gaa="git add --all"

# 1.2 Shortening
alias gst="git status"
alias l='ls'

# 1.3 System Convenience
alias lock="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
alias android="open -a 'Android Studio'"
alias xopen="open -a 'XCode'"


# 2 FUNCTIONS

# 2.1 Opening VS Code from Terminal
# Opens a VS Code workspace with the current directory as the project.
#
# Example
# `code ~/projects/coding_thing`
# Will open a VS Code workspace with the `~/projects/coding_thing` directory open as the current project.
#
function code {
  if [[ $1 = 0 ]]
  then
    open -a "Visual Studio Code"
  else
    local argPath="$1"
    [[ $1 = /* ]] && argPath="$1" || argPath="$PWD/${1#./}"
    open -a "Visual Studio Code" "$argPath"
  fi
}

# 2.2 Navigating to cohort folders
# Navigates to the directery of a cohort in a specific location.
#
# $1 - Cohort code to navigate to
#
# Example
# `cohort e31`
# Will navigate to `/Users/user/codeclan/cohorts/e31`
#
function cohort {
  if [ "$1" != "" ]
  then
    cd "/Users/user/codeclan/cohorts/$1"
  else
    cd "/Users/user/codeclan/cohorts"
  fi
}

# 2.3 Creating a Git repository
# Creates a local git repository in the current directory, then creates a .gitignore if there is none, and commits it.
# Then creates a remote repository on Github, adds it as an origin, then pushes to `origin/master`, setting that as the
# default upstream branch.
#
# $1 - Name for remote repository
#
# Example
# `gcreate my-git-repo`
# Will create a local repo, create a gitignore file, add all changes, commit, then it will create a remote repo on GitHub
# called `my-git-repo`, add it as an origin, then push to `origin/master` and set that as the default upstream.
#
function gcreate {
    if [[ $1 != "" ]]
    then
        git init
        touch .gitignore
        git add .
        git commit -m "Initial commit"
        curl -u 'HarrisonBooth' https://api.github.com/user/repos -d '{"name":"'$1'"}'
        git remote add origin git@github.com:HarrisonBooth/$1.git
        git push origin master
    else
        echo "Please provide a name for your new git repo"
        echo "e.g. gcreate MyNewRepo"
    fi
}


# 3 PROMPT

# 3.1 Left Prompt
local prompt_inner="%(?:%{$fg_bold[green]%}%(3~|%-1~/.../%1~|%4~):%{$fg_bold[red]%}%(3~|%-1~/.../%1~|%4~))"
PROMPT='$FG[000]< ${prompt_inner}%b$FG[000] /> ' # `< ~/.../current_folder />`
# NOTE: If preceeding command was successful path appears green, if not - red.

# 3.2 Right Prompt (Git Information)
# 3.2.1 Set format of right prompt
RPROMPT='$(git_prompt_info)$(git_prompt_status)%{$reset_color%}' # `branch status_addition`

# 3.2.2 Clear default git status additions
ZSH_THEME_GIT_PROMPT_PREFIX=" "
ZSH_THEME_GIT_PROMPT_SUFFIX=""
ZSH_THEME_GIT_PROMPT_DIRTY=""
ZSH_THEME_GIT_PROMPT_CLEAN=""

# 3.2.3 Configure custom detailed git status additions
ZSH_THEME_GIT_PROMPT_ADDED="%{$fg_bold[green]%}+"     # Staged file(s): ----- `+` [green]
ZSH_THEME_GIT_PROMPT_MODIFIED="%{$fg_bold[blue]%}!"   # Modified file(s): --- `!` [blue]
ZSH_THEME_GIT_PROMPT_DELETED="%{$fg_bold[red]%}-"     # Deleted file(s): ---- `-` [red]
ZSH_THEME_GIT_PROMPT_RENAMED="%{$fg_bold[magenta]%}>" # Renamed File(s): ---- `>` [magenta]
ZSH_THEME_GIT_PROMPT_UNMERGED="%{$fg_bold[yellow]%}#" # Unmerged File(s): --- `#` [yellow]
ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg_bold[cyan]%}?"  # Untracker Files(s): - `?` [cyan]


# 4 LS COLORS
# directory: ------------------------------------- Ex [bold blue]
# symbolic link: --------------------------------- fx [magenta]
# socket: ---------------------------------------- cx [green]
# pipe: ------------------------------------------ dx [brown]
# executable: ------------------------------------ bx [red]
# block special: --------------------------------- eg [blue with cyan bg]
# character special: ----------------------------- ed [blue with brown bg]
# executable with setuid bit set: ---------------- ab [black with red bg]
# executable with setgid bit set: ---------------- ag [black with cyan bg]
# directory writable to others, with sticky bit: - ac [black with green bg]
# directory writable to others, without sticky: -- ad [black with brown bg]

export LSCOLORS=Exfxcxdxbxegedabagacad

# NOTE: below are the colour values and rules
# Colour values 
#   - a black
#   - b red
#   - c green
#   - d brown
#   - e blue
#   - f magenta
#   - g cyan
#   - h light grey
#   - A bold black, usually shows up as dark grey
#   - B bold red
#   - C bold green
#   - D bold brown, usually shows up as yellow
#   - E bold blue
#   - F bold magenta
#   - G bold cyan
#   - H bold light grey; looks like bright white
#   - x default foreground or background